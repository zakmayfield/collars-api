// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Link {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   description String
//   url         String
//   comments    Comment[]
//   postedBy    User?     @relation(fields: [postedById], references: [id])
//   postedById  Int?
// }

// model Comment {
//   id     Int    @id @default(autoincrement())
//   body   String
//   link   Link?  @relation(fields: [linkId], references: [id], onDelete: Cascade)
//   linkId Int?
//   postedBy User? @relation(fields: [postedById], references: [id])
//   postedById  Int?
// }

// model User {
//   id       Int    @id @default(autoincrement())
//   name     String
//   email    String @unique
//   password String
//   links    Link[]
//   comments Comment[]
// }

model Address {
  id Int @id @default(autoincrement())

  address   String  @db.VarChar(100)
  apartment String? @db.VarChar(25)
  city      String  @db.VarChar(50)
  state     String  @db.VarChar(50)
  zip       Int
  country   String  @db.VarChar(100)

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  volunteer   Volunteer?   @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  volunteerId   Int? @unique
  userProfileId Int? @unique
}

model Contact {
  id Int @id @default(autoincrement())

  phone String? @db.VarChar(50)
  email String? @db.VarChar(75)

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userProfileId Int? @unique
}

model User {
  id       Int         @id @default(autoincrement())
  name     String
  email    String      @unique
  password String
  type     AccountType @default(DEFAULT)

  profile UserProfile?

  pets      Pet[]
  savedPets UsersToPets[]

  volunteers Volunteer[]
}

model Volunteer {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  // allow password to be changed via permissions on the front by either the volunteer themself of the agency who created this volunteer
  password String
  phone    String?

  address Address?

  agency   User @relation(fields: [agencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  agencyId Int
}

enum AccountType {
  DEFAULT
  VOLUNTEER
  AGENCY
}

model UserProfile {
  id  Int     @id @default(autoincrement())
  bio String? @db.VarChar(500)

  address Address[]
  contact Contact[]

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int  @unique
}

model Pet {
  id Int @id @default(autoincrement())

  name    String         @db.VarChar(50)
  species Species
  breed   BreedsToPets[]
  savedBy UsersToPets[]

  profile PetProfile?

  agency   User? @relation(fields: [agencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  agencyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UsersToPets {
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  pet    Pet  @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId  Int

  @@id([userId, petId])
}

enum Species {
  CAT
  DOG
  BIRD
  HORSE
  FISH
  REPTILE
  BARNYARD
}

model PetProfile {
  id Int @id @default(autoincrement())

  age      Int?
  bio      String? @db.VarChar(250)
  weight   Int?
  birthday String? @db.VarChar(128)

  isFixed          Boolean?
  isAdopted        Boolean  @default(false)
  isAvailable      Boolean
  isHouseTrained   Boolean?
  isVaccineCurrent Boolean?

  sex      Sex?      @default(UNKNOWN)
  coat     Coat?     @default(UNKNOWN)
  diet     Diet?     @default(STANDARD)
  color    Color?    @default(UNKNOWN)
  goodWith GoodWith? @default(UNKNOWN)

  personality Personality? @default(UNKNOWN)

  images ImagesToPetProfiles[]

  pet   Pet @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId Int @unique
}

enum Sex {
  UNKNOWN
  FEMALE
  MALE
}

enum Color {
  UNKNOWN
  BLACK
  WHITE
  BROWN
  GOLDEN
  SPOTTED
  BRINDLE
}

enum Personality {
  UNKNOWN
  ACTIVE
  CURIOUS
  GOOFY
  HYPER
  LAZY
  LONER
}

enum Diet {
  STANDARD
  MEDICAL
  WEIGHT
}

enum Coat {
  UNKNOWN
  SHORT
  MEDIUM
  LONG
  NONE
}

enum GoodWith {
  UNKNOWN
  CATS
  DOGS
  CHILDREN
  CATS_AND_DOGS
  ALL
}

model Breed {
  id Int @id @default(autoincrement())

  breed   String
  species Species

  pets BreedsToPets[]
}

model BreedsToPets {
  breed   Breed @relation(fields: [breedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  breedId Int
  pet     Pet   @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId   Int

  @@id([breedId, petId])
}

model Image {
  id Int @id @default(autoincrement())

  url       String?
  file      String?
  thumbnail String?

  pets ImagesToPetProfiles[]
}

model ImagesToPetProfiles {
  image        Image      @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId      Int
  petProfile   PetProfile @relation(fields: [petProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petProfileId Int

  @@id([imageId, petProfileId])
}
