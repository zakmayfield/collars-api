generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id Int @id @default(autoincrement())

  address   String  @db.VarChar(100)
  apartment String? @db.VarChar(25)
  city      String  @db.VarChar(50)
  state     String  @db.VarChar(50)
  zip       Int
  country   String  @db.VarChar(100)

  agencyProfile AgencyProfile? @relation(fields: [agencyProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userProfile   UserProfile?   @relation(fields: [userProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  agencyProfileId Int?
  userProfileId   Int? @unique
}

model Contact {
  id Int @id @default(autoincrement())

  phone String? @db.VarChar(50)
  email String? @db.VarChar(75)

  agencyProfile AgencyProfile? @relation(fields: [agencyProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userProfile   UserProfile?   @relation(fields: [userProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  agencyProfileId Int?
  userProfileId   Int? @unique
}

model Agency {
  id Int @id @default(autoincrement())

  name     String  @unique @db.VarChar(28)
  email    String  @unique @db.VarChar(75)
  password String  @db.VarChar(128)
  token    String? @db.VarChar(256)

  profile    AgencyProfile?
  pets       Pet[]
  volunteers User[]
}

model AgencyProfile {
  id Int @id @default(autoincrement())

  bio      String? @db.VarChar(500)

  addresses Address[]
  contacts  Contact[]

  agency   Agency @relation(fields: [agencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  agencyId Int    @unique
}

model User {
  id Int @id @default(autoincrement())

  username String   @unique @db.VarChar(20)
  email    String   @unique @db.VarChar(75)
  password String   @db.VarChar(128)
  role     UserRole @default(ADOPTER)
  token    String?  @db.VarChar(256)

  profile UserProfile?

  savedPets UsersToPets[]

  agency   Agency? @relation(fields: [agencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  agencyId Int?
}

enum UserRole {
  ADOPTER
  VOLUNTEER
}

model UserProfile {
  id Int @id @default(autoincrement())

  firstName String? @db.VarChar(50)
  lastName  String? @db.VarChar(50)
  bio       String? @db.VarChar(250)

  contact Contact?
  address Address?

  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int  @unique
}

model UsersToPets {
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  pet    Pet  @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId  Int

  @@id([userId, petId])
}

model Pet {
  id Int @id @default(autoincrement())

  name    String         @db.VarChar(50)
  species Species
  breed   BreedsToPets[]
  savedBy UsersToPets[]

  profile PetProfile?

  agency   Agency? @relation(fields: [agencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  agencyId Int
}

enum Species {
  CAT
  DOG
  BIRD
  HORSE
  FISH
  REPTILE
  BARNYARD
}

model PetProfile {
  id Int @id @default(autoincrement())

  age      Int?
  bio      String? @db.VarChar(250)
  weight   Int?
  birthday String? @db.VarChar(128)

  isFixed          Boolean?
  isAvailable      Boolean
  isHouseTrained   Boolean?
  isVaccineCurrent Boolean?

  sex         Sex?         @default(UNKNOWN)
  coat        Coat?        @default(UNKNOWN)
  diet        Diet?        @default(STANDARD)
  color       Color?       @default(UNKNOWN)
  goodWith    GoodWith?    @default(UNKNOWN)
  personality Personality? @default(UNKNOWN)

  images ImagesToPetProfiles[]

  pet   Pet @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId Int @unique
}

enum Sex {
  UNKNOWN
  FEMALE
  MALE
}

enum Color {
  UNKNOWN
  BLACK
  WHITE
  BROWN
  GOLDEN
  SPOTTED
  BRINDLE
}

enum Personality {
  UNKNOWN
  ACTIVE
  CURIOUS
  GOOFY
  HYPER
  LAZY
  LONER
}

enum Diet {
  STANDARD
  MEDICAL
  WEIGHT
}

enum Coat {
  UNKNOWN
  SHORT
  MEDIUM
  LONG
  NONE
}

enum GoodWith {
  UNKNOWN
  CATS
  DOGS
  CHILDREN
  CATS_AND_DOGS
  ALL
}

model Breed {
  id Int @id @default(autoincrement())

  breed String @unique

  pets BreedsToPets[]
}

model BreedsToPets {
  breed   Breed @relation(fields: [breedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  breedId Int
  pet     Pet   @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId   Int

  @@id([breedId, petId])
}

model Image {
  id Int @id @default(autoincrement())

  url       String?
  file      String?
  thumbnail String?

  pets ImagesToPetProfiles[]
}

model ImagesToPetProfiles {
  image        Image      @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId      Int
  petProfile   PetProfile @relation(fields: [petProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petProfileId Int

  @@id([imageId, petProfileId])
}