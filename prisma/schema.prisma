generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address   String @db.VarChar(100)
  apartment String? @db.VarChar(25)
  city      String @db.VarChar(50)
  state     String @db.VarChar(50)
  zip       Int
  country   String @db.VarChar(100)

  agencyProfile AgencyProfile? @relation(fields: [agencyProfileId], references: [id])
  userProfile   UserProfile?   @relation(fields: [userProfileId], references: [id])

  agencyProfileId Int? @unique
  userProfileId   Int? @unique
}

model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone String? @db.VarChar(50)
  email String? @db.VarChar(75)

  agencyProfile AgencyProfile? @relation(fields: [agencyProfileId], references: [id])
  userProfile   UserProfile?   @relation(fields: [userProfileId], references: [id])

  agencyProfileId Int? @unique
  userProfileId   Int? @unique
}

model Agency {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  password String
  token    String

  profile    AgencyProfile?
  pets       Pet[]
  volunteers User[]
}

model AgencyProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  bio      String

  contact Contact?
  address Address?

  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId Int    @unique
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String  @unique
  email    String  @unique
  password String
  role     String
  token    String?

  profile UserProfile?

  savedPets UsersToPets[]

  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId Int?
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String
  bio       String

  contact Contact?
  address Address?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model UsersToPets {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  pet    Pet  @relation(fields: [petId], references: [id])
  petId  Int

  @@id([userId, petId])
}

model Pet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String @db.VarChar(50)
  species String @db.VarChar(100)
  breed BreedsToPets[]
  savedBy UsersToPets[]

  profile PetProfile?

  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId Int
}

model PetProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  age Int 
  bio String @db.VarChar(250)
  sex String
  weight Int
  coat String
  birthday String

  goodWith String
  personalityType String
  isHouseTrained Boolean

  dietRestrictions String

  isVaccineCurrent Boolean?
  isFixed Boolean?

  isAvailable Boolean
  
  color ColorsToPetProfiles[]
  images ImagesToPetProfiles[]

  pet   Pet @relation(fields: [petId], references: [id])
  petId Int @unique
}

model Color {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  color String @unique

  pets ColorsToPetProfiles[]
}

model ColorsToPetProfiles {
  color Color @relation(fields: [colorId], references: [id])
  colorId Int
  petProfile PetProfile @relation(fields: [petProfileId], references: [id])
  petProfileId Int

  @@id([colorId, petProfileId])
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String?
  file String?
  thumbnail String?

  pets ImagesToPetProfiles[]
}

model ImagesToPetProfiles {
  image Image @relation(fields: [imageId], references: [id])
  imageId Int
  petProfile PetProfile @relation(fields: [petProfileId], references: [id])
  petProfileId Int

  @@id([imageId, petProfileId])
}

model Breed {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  breed String @unique

  pets BreedsToPets[]
}

model BreedsToPets {
  breed Breed @relation(fields: [breedId], references: [id])
  breedId Int
  pet Pet @relation(fields: [petId], references: [id])
  petId Int

  @@id([breedId, petId])
}